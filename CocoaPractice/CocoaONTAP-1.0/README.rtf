{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf430
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 CourierNewPSMT;}
{\colortbl;\red255\green255\blue255;\red249\green252\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc2\leveljcn2\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid0\'02\'05.;}{\levelnumbers\'01;}}{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww12460\viewh17660\viewkind0
\deftab720
\pard\pardeftab720\sl380\sa120\ql\qnatural

\f0\fs26 \cf0 \cb2 CocoaONTAP is an UNSUPPORTED port of the ManageONTAP SDK to Objective-C. It compiles both for Mac OS X desktop apps as well as on the iPhone. It should look familiar to users of other ManageONTAP SDK languages, while also providing features useful in a Cocoa application such as asynchronous method invocation.\
\

\b\fs36 Classes
\b0\fs26 \

\i\fs28 NAElement
\i0\fs26 \
NAElement represents an XML element in the ManageONTAP API, containing either textual content or nested NAElement children.\
\
Constructing: (Non-autoreleased alloc/init methods also exist)\

\f1\fs24 NAElement *element = [NAElement elementWithName:@"system-get-version"];\
NAElement *element = [NAElement elementWithName:@"volume" content:@"myvolume"];
\f0\fs26 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \cb1 \
NAElements are also returned from API invocations. Messages exist on NAElement to retrieve the operation status from the root element and navigate children.\
\
The overall status of an API call may be tested with -(BOOL)resultsPassed. A successful call will return YES, a failed call will return NO:\

\f1 \cb2     if (![response resultsPassed]) \{ /* Handle error */ \}\

\f0 \
If the call failed, additional information is available through -(NSString*)resultsReason and -(int)resultsErrno to retrieve the textual error message and numeric error code from ONTAP.\
\
Children may be navigated with the -(NAElement*)child: and -(NSArray*)children messages. If the node is a leaf node, the -(NSString)content message will return the contents.\
\

\i\fs28 \cb1 NAServer\

\i0\fs26 \cb2 \
NAServer represents the set of parameters to connect to a ZAPI target. These include:\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\li720\fi-720\ql\qnatural\pardirnatural
\ls1\ilvl0
\f1 \cf0 \cb1 {\listtext	\'95	}
\f0 \cb2 Hostname\
{\listtext	\'95	}Port\
{\listtext	\'95	}Transport (HTTP or HTTPS)\
{\listtext	\'95	}Server type (ONTAP or DFM)\
{\listtext	\'95	}Minimum API version
\f1 \cb1 \
\
\ls1\ilvl0
\fs24 \cb2 NAServer *server = [[NAServer alloc] initWithServer:@"mysystem.example.com"\
    majorVersion:1\
\ls1\ilvl0\cb1     minorVersion:0];\
[server setUser:@"root" password:@"password"];\
[server setTransportType:NATransportHTTPS];\
\
\ls1\ilvl0
\f0\i\fs28 \cb2 NAApiConnection\
\
\pard\tx220\tx720\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\ls1\ilvl0
\i0\fs26 \cf0 \cb2 NAApiConnection represents a single active connection to a server. This is unlike other ManageONTAP SDK implementations, in order to provide support for asynchronous requests. This roughly mirrors NSURLConnection from Cocoa.\
\
Sending a synchronous request:\
\ls1\ilvl0
\f1 \cb2 NAElement *request = [NAElement elementWithName:@"system-get-version"];\
NAElement *response = [NAApiConnection sendSynchronousRequest:request\
    toServer:server];
\f0 \cb2 \
\ls1\ilvl0
\f1 \cb1 \
\ls1\ilvl0
\f0 \cb2 An asynchronous request will issue the ZAPI in the background, and invoke the specified selector when complete. The callback is then responsible for releasing the connection object when complete:
\f1 \cb1 \
\
- (void) systemGetVersionCallback:(NAApiConnection*)connection \{\
    NAElement result = [connection result];\
    // Handle result\
    [connection release];\
\}\
\
// ...\
\
    NAElement *request = [NAElement elementWithName:@"system-get-version"];\
\
    NAApiConnection *connection = [[NAApiConnection alloc] \
        initWithRequest:request\
        toServer:server\
        target:self\
        selector:@selector(systemGetVersionCallback:)];\
    if (!connection) \{\
        // Creating the request failed\
    \}\
\
\ls1\ilvl0
\f0\b\fs36 \cb2 Building as a Framework\
\ls1\ilvl0
\b0\fs26 \cb2 The included XCode project builds a universal Cocoa framework named ManageONTAP. To use CocoaONTAP in a Mac OS X application, include this framework in the application bundle, and include ManageONTAP/ManageONTAP.h where needed in your application.\
\
\ls1\ilvl0
\b\fs36 \cb2 Building for the iPhone\
\ls1\ilvl0
\b0\fs26 \cb2 The iPhone SDK agreement and the XCode tools prohibit third-party frameworks. To use the ManageONTAP SDK in an iPhone app, include the source files in the framework directory directly in your application. Include ManageONTAP.h where needed.\
\
\ls1\ilvl0
\b\fs36 \cb2 Revision History:\
\ls1\ilvl0
\b0\fs26 \cb2 1/6/2009 Version 1.0\
	Initial release\
\
$Id: README.rtf 194 2009-01-06 15:16:34Z sunday $}